/***********************************************
 * Main.java
 ***********************************************
 *
 ***********************************************
 * VERSION 1
 *
 * Medical University Graz
 * Institut of Pathology
 * Group of Univ.Prof. Dr.med.univ. Kurt Zatloukal
 * kurt.zatloukal(at)medunigraz.at
 * http://forschung.medunigraz.at/fodok/suchen.person_uebersicht?sprache_in=en&menue_id_in=101&id_in=90075196
 *
 ***********************************************
 * VERSION 2
 * http://sourceforge.net/projects/saat/
 *
 * Medical University Graz
 * Institut of Pathology
 * Group of Univ.Prof. Dr.med.univ. Kurt Zatloukal
 * kurt.zatloukal(at)medunigraz.at
 * http://forschung.medunigraz.at/fodok/suchen.person_uebersicht?sprache_in=en&menue_id_in=101&id_in=90075196
 *
 * Fraunhofer-Gesellschaft
 * Fraunhofer Institute for Biomedical Engineering
 * Central Research Infrastructure for molecular Pathology
 * Dr. Christina Schrï¿½der
 * Christina.Schroeder(at)ibmt.fraunhofer.de
 * http://www.crip.fraunhofer.de/en/about/staff?noCache=776:1304399536
 ***********************************************
 * DESCRIPTION
 *
 * The main class for the textmining, starting the coding as a console
 * aplication.
 ***********************************************
 */

package SAAT.textmining.gui;

import java.awt.Color;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.Calendar;
import java.util.GregorianCalendar;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;
import javax.swing.text.MutableAttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

import SAAT.generic.PrintTime;

/**
 *
 * @author  Reihs Robert
 * @author  Sauer Stefan
 * @version 2.0
 */
public class LogViewer extends javax.swing.JFrame {
  private boolean writeToFile_ = false;
  private PrintTime pt = new PrintTime();
//  BufferedWriter fout_;
  private OutputStreamWriter fout_;
  
  
  /** Creates new form LogViewer */
  public LogViewer() {
    initComponents();
    
    GregorianCalendar cal = new GregorianCalendar();
    int jahr = cal.get(Calendar.YEAR);
    int month = cal.get(Calendar.MONTH) + 1;
    int tag = cal.get(Calendar.DAY_OF_MONTH);
    int stunden = cal.get(Calendar.HOUR_OF_DAY);
    int minuten = cal.get(Calendar.MINUTE);
    int sekunden = cal.get(Calendar.SECOND);
    String datetime = String.format("%4d.%2d.%2d_%2d%2d%2d",jahr, month, tag, stunden, minuten, sekunden, 0);

    
    
    try {
      //fout_ =  new BufferedWriter(new OutputStreamWriter(new FileOutputStream("log_"+datetime+".txt")));
      fout_ =  new OutputStreamWriter(new FileOutputStream("log_"+datetime+".txt"));
    } catch (FileNotFoundException ex) {
      ex.printStackTrace();
    }
  }
  
  public void setFileWriter(boolean onOff) {
    writeToFile_ = onOff;
  }
  
  //TODO: implement filewriter
  
  public synchronized void out_printTime(boolean newline, boolean mark) {
    MutableAttributeSet keyWord = new SimpleAttributeSet();
    StyleConstants.setForeground(keyWord, Color.black);

    if(newline)
      out_print(pt.getTime(mark), keyWord);
    else
      out_print(pt.getTime(mark), keyWord);
  }
  
  
  public synchronized void out_println(String text) {
    out_println(text, Color.black);
  }
  

  public synchronized void out_println(String text , java.awt.Color color) {
    MutableAttributeSet keyWord = new SimpleAttributeSet();
    StyleConstants.setForeground(keyWord, color);
    //StyleConstants.setItalic(keyWord, true);
    
    //  Highlight some keywords
    //doc.setCharacterAttributes(0, 3, keyWord, false);
    //doc.setCharacterAttributes(19, 4, keyWord, false);

    out_print(text + "\r\n", keyWord);
  }
  
  private synchronized void out_print(String text , MutableAttributeSet attribute) {
    StyledDocument doc = log_.getStyledDocument();
    
    try {
      doc.insertString(doc.getLength(), text, attribute );
      fout_.write(text);
      
      System.out.print(text);

    } catch(java.io.IOException e) {
    } catch(Exception e) {
      System.err.println(e.getMessage());
    }

  }
  

  public synchronized void err_println(String text) {
    MutableAttributeSet keyWord = new SimpleAttributeSet();
    StyleConstants.setForeground(keyWord, Color.red);
    StyleConstants.setItalic(keyWord, true);
    StyleConstants.setBold(keyWord, true);
    out_print(text + "\r\n", keyWord);
  }
  
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
  private void initComponents() {
    jScrollPane1 = new javax.swing.JScrollPane();
    log_ = new javax.swing.JTextPane();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    jScrollPane1.setViewportView(log_);

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(layout.createSequentialGroup()
        .addContainerGap()
        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 643, Short.MAX_VALUE)
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(layout.createSequentialGroup()
        .addContainerGap()
        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
        .addContainerGap())
    );
    pack();
  }// </editor-fold>//GEN-END:initComponents

  protected void finalize() throws Throwable {
    try {
      fout_.close();
    } catch (IOException ex) {
      ex.printStackTrace();
    } finally {
      super.finalize();
    }
  }
  
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JTextPane log_;
  // End of variables declaration//GEN-END:variables
  
}
