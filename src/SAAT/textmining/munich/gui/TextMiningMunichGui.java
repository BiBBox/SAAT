/***********************************************
 * TextMiningMunichGui.java
 ***********************************************
 *
 ***********************************************
 * VERSION 1
 *
 * Medical University Graz
 * Institut of Pathology
 * Group of Univ.Prof. Dr.med.univ. Kurt Zatloukal
 * kurt.zatloukal(at)medunigraz.at
 * http://forschung.medunigraz.at/fodok/suchen.person_uebersicht?sprache_in=en&menue_id_in=101&id_in=90075196
 *
 ***********************************************
 * VERSION 2
 * http://sourceforge.net/projects/saat/
 *
 * Medical University Graz
 * Institut of Pathology
 * Group of Univ.Prof. Dr.med.univ. Kurt Zatloukal
 * kurt.zatloukal(at)medunigraz.at
 * http://forschung.medunigraz.at/fodok/suchen.person_uebersicht?sprache_in=en&menue_id_in=101&id_in=90075196
 *
 * Fraunhofer-Gesellschaft
 * Fraunhofer Institute for Biomedical Engineering
 * Central Research Infrastructure for molecular Pathology
 * Dr. Christina Schr�der
 * Christina.Schroeder(at)ibmt.fraunhofer.de
 * http://www.crip.fraunhofer.de/en/about/staff?noCache=776:1304399536
 ***********************************************
 * DESCRIPTION
 *
 * The main window for textmining in munich with the program flows
 ***********************************************
 */
package SAAT.textmining.munich.gui;

import SAAT.textmining.munich.ImportIntoDb;
import java.awt.image.BufferedImage;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import SAAT.textmining.TextMining;
import SAAT.textmining.corrector.*;
import SAAT.textmining.munich.*;
import SAAT.textmining.munich.gui.FileFilterXML;
import SAAT.textmining.munich.gui.SpesimentImport;

/**
 * The main window for textmining in munich with the program flows
 * 
 * @author  Reihs Robert
 * @author  Sauer Stefan
 * @version 2.0
 * @since   since_version_2_date
 */
public class TextMiningMunichGui extends javax.swing.JFrame {

    private String FileName_;
    private String export_folder_;
    private String[] args_;
    private String[] text_mining_options_ = {"-ICD", "-T", "-N", "-M", "-R", "-G", "-L", "-V"};
    private String spesimen_;

    /** Creates new form TextMiningMunichGui */
    public TextMiningMunichGui(String[] args) {
        initComponents();
        args_ = args;

        // Set Icon
        try {
            BufferedImage icon;
            File imageFile = new File("SAAT.png");
            icon = ImageIO.read(imageFile);
            setIconImage(icon);
        } catch (IOException ex) {
            Logger.getLogger(SpesimentImport.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jCheckBox1 = new javax.swing.JCheckBox();
    jLabel1 = new javax.swing.JLabel();
    jButtonSelectXMLFile = new javax.swing.JButton();
    jTextFieldFileName = new javax.swing.JTextField();
    jButtonStartImport = new javax.swing.JButton();
    jScrollPane1 = new javax.swing.JScrollPane();
    jTextAreaLog = new javax.swing.JTextArea();
    jCheckBox2 = new javax.swing.JCheckBox();
    jLabel2 = new javax.swing.JLabel();
    jCheckBox3 = new javax.swing.JCheckBox();
    jLabel3 = new javax.swing.JLabel();
    jCheckBox4 = new javax.swing.JCheckBox();
    jLabel4 = new javax.swing.JLabel();
    jButtonStartTextCleanup = new javax.swing.JButton();
    jButtonStartTextMining = new javax.swing.JButton();
    jButtonStartExport = new javax.swing.JButton();
    jButtonEditTextMiningOptions = new javax.swing.JButton();
    jTextFieldExportFolder = new javax.swing.JTextField();
    jButtonSelectExport = new javax.swing.JButton();
    jLabel5 = new javax.swing.JLabel();
    jLabel6 = new javax.swing.JLabel();
    jLabel7 = new javax.swing.JLabel();
    jCheckBox5 = new javax.swing.JCheckBox();
    jLabel8 = new javax.swing.JLabel();
    jButtonStartRuleMarker = new javax.swing.JButton();
    jMenuBar2 = new javax.swing.JMenuBar();
    jMenu3 = new javax.swing.JMenu();
    jMenu4 = new javax.swing.JMenu();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("TextMining");

    jCheckBox1.setSelected(true);
    jCheckBox1.setText("-");
    jCheckBox1.setEnabled(false);
    jCheckBox1.setFocusPainted(false);
    jCheckBox1.setFocusable(false);
    jCheckBox1.setRequestFocusEnabled(false);

    jLabel1.setText("XML Import");

    jButtonSelectXMLFile.setText("Select File");
    jButtonSelectXMLFile.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jButtonSelectXMLFileMouseClicked(evt);
      }
    });

    jTextFieldFileName.setText("Please Select XML File");

    jButtonStartImport.setText("Start");
    jButtonStartImport.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButtonStartImportActionPerformed(evt);
      }
    });

    jTextAreaLog.setColumns(20);
    jTextAreaLog.setRows(5);
    jScrollPane1.setViewportView(jTextAreaLog);

    jCheckBox2.setSelected(true);
    jCheckBox2.setText("-");
    jCheckBox2.setEnabled(false);
    jCheckBox2.setFocusPainted(false);
    jCheckBox2.setFocusable(false);
    jCheckBox2.setRequestFocusEnabled(false);

    jLabel2.setText("Text Cleanup");

    jCheckBox3.setSelected(true);
    jCheckBox3.setText("-");
    jCheckBox3.setEnabled(false);
    jCheckBox3.setFocusPainted(false);
    jCheckBox3.setFocusable(false);
    jCheckBox3.setRequestFocusEnabled(false);

    jLabel3.setText("Text Mining");

    jCheckBox4.setSelected(true);
    jCheckBox4.setText("-");
    jCheckBox4.setEnabled(false);
    jCheckBox4.setFocusPainted(false);
    jCheckBox4.setFocusable(false);
    jCheckBox4.setRequestFocusEnabled(false);

    jLabel4.setText("Export");

    jButtonStartTextCleanup.setText("Start");
    jButtonStartTextCleanup.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButtonStartTextCleanupActionPerformed(evt);
      }
    });

    jButtonStartTextMining.setText("Start");
    jButtonStartTextMining.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButtonStartTextMiningActionPerformed(evt);
      }
    });

    jButtonStartExport.setText("Start");
    jButtonStartExport.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButtonStartExportActionPerformed(evt);
      }
    });

    jButtonEditTextMiningOptions.setText("Edit");
    jButtonEditTextMiningOptions.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButtonEditTextMiningOptionsActionPerformed(evt);
      }
    });

    jTextFieldExportFolder.setText("Please Select Export Folder");

    jButtonSelectExport.setText("Select Folder");
    jButtonSelectExport.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jButtonSelectExportMouseClicked(evt);
      }
    });

    jLabel5.setBackground(new java.awt.Color(255, 255, 255));
    jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/patho/CRIP_logo_gruen3.gif"))); // NOI18N

    jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18));
    jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel6.setText("SAAT Text Mining");

    jLabel7.setFont(new java.awt.Font("Tahoma", 0, 10));
    jLabel7.setText(" © 2009 Fraunhofer IBMT & Medizinische Universität Graz ");

    jCheckBox5.setSelected(true);
    jCheckBox5.setText("-");
    jCheckBox5.setEnabled(false);
    jCheckBox5.setFocusPainted(false);
    jCheckBox5.setFocusable(false);
    jCheckBox5.setRequestFocusEnabled(false);

    jLabel8.setText("Rule Marker");

    jButtonStartRuleMarker.setText("Start");
    jButtonStartRuleMarker.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButtonStartRuleMarkerActionPerformed(evt);
      }
    });

    jMenu3.setText("File");
    jMenuBar2.add(jMenu3);

    jMenu4.setText("Edit");
    jMenuBar2.add(jMenu4);

    setJMenuBar(jMenuBar2);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
            .addGap(214, 214, 214))
          .addGroup(layout.createSequentialGroup()
            .addComponent(jLabel5)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
              .addComponent(jCheckBox5)
              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
              .addComponent(jLabel8)
              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jButtonStartRuleMarker))
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
              .addComponent(jCheckBox2)
              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
              .addComponent(jLabel2)
              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jButtonStartTextCleanup))
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                  .addComponent(jCheckBox1)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jLabel1))
                .addGroup(layout.createSequentialGroup()
                  .addComponent(jCheckBox4)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jLabel4))
                .addGroup(layout.createSequentialGroup()
                  .addComponent(jCheckBox3)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jLabel3)))
              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                  .addComponent(jTextFieldFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jButtonSelectXMLFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 251, Short.MAX_VALUE)
                  .addComponent(jButtonEditTextMiningOptions))
                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                  .addComponent(jTextFieldExportFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jButtonSelectExport, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)))
              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jButtonStartTextMining, javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(jButtonStartExport, javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(jButtonStartImport, javax.swing.GroupLayout.Alignment.TRAILING))))))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jCheckBox1)
          .addComponent(jLabel1)
          .addComponent(jTextFieldFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jButtonSelectXMLFile)
          .addComponent(jButtonStartImport))
        .addGap(8, 8, 8)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jCheckBox2)
          .addComponent(jLabel2)
          .addComponent(jButtonStartTextCleanup))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jCheckBox3)
          .addComponent(jLabel3)
          .addComponent(jButtonStartTextMining)
          .addComponent(jButtonEditTextMiningOptions))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jCheckBox4)
          .addComponent(jLabel4)
          .addComponent(jButtonStartExport)
          .addComponent(jTextFieldExportFolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jButtonSelectExport))
        .addGap(8, 8, 8)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jCheckBox5)
          .addComponent(jLabel8)
          .addComponent(jButtonStartRuleMarker))
        .addGap(18, 18, 18)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jLabel7)
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

    /**
     * The action event for the xmlfile selection
     *
     * @param evt The action event
     */
private void jButtonSelectXMLFileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonSelectXMLFileMouseClicked
    JFileChooser fj = new JFileChooser();
    fj.setFileFilter(new FileFilterXML());
    int returnval = fj.showOpenDialog(this);


    if (returnval == JFileChooser.APPROVE_OPTION) {
        FileName_ = fj.getSelectedFile().getAbsolutePath();
        FileName_ = FileName_.replace("\\", "\\\\");
        jTextFieldFileName.setText(fj.getSelectedFile().getName());
    }
}//GEN-LAST:event_jButtonSelectXMLFileMouseClicked

    /**
     * Action for the starting of the cleanup
     *
     * @param evt The action event
     */
private void jButtonStartTextCleanupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartTextCleanupActionPerformed
    Thread t = new Thread() {

        public void run() {

            correctFindingText f = new correctFindingText();
            f.execute();
            f.upload();

            diseaseCreate dc = new diseaseCreate();
            dc.doWork();

            correctDiseases d = new correctDiseases();
            d.execute();
            d.upload();
        }
    };
    jTextAreaLog.append("\n\rstarting cleanup ...");
    t.start();
    jTextAreaLog.append(" " + String.valueOf(t.getId()));
    jTextAreaLog.append(" " + t.getState().toString());
    while (t.isAlive()) {
    }
    jTextAreaLog.append("\n\r  >>>  Cleanup done.  <<<  ");
    jButtonStartTextCleanup.setEnabled(true);
    jButtonStartTextMining.setEnabled(true);

}//GEN-LAST:event_jButtonStartTextCleanupActionPerformed

    /**
     * Set the speciments
     *
     * @param specimen The speciments
     */
    public void setSpeciment(String specimen) {
        spesimen_ = specimen;
    }

    /**
     * Action for the import starting
     *
     * @param evt The action event
     */
private void jButtonStartImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartImportActionPerformed

    SpesimentImport sp = new SpesimentImport(this, true);
    sp.setVisible(true);
    int value = sp.RET_OK;
    if (value == SpesimentImport.RET_CANCEL) {
        return;
    }

    if (spesimen_.equals("cancel")) {
        return;
    }

    final String file = FileName_;
    if (file.length() > 0) {
        Thread t = new Thread() {

            public void run() {
                ImportIntoDb importer = new ImportIntoDb(file, spesimen_);
            }
        };
        jTextAreaLog.append("\n\rstarting import ...");
        t.start();
        jTextAreaLog.append(" " + String.valueOf(t.getId()));
        jTextAreaLog.append(" " + t.getState().toString());
        while (t.isAlive()) {
        }
        jTextAreaLog.append("\n\r  >>>  Import done.  <<<  ");
        jButtonStartImport.setEnabled(true);
        jButtonStartTextCleanup.setEnabled(true);
    } else {
        jTextAreaLog.append("\n\rERROR: No XML File");
    }
}//GEN-LAST:event_jButtonStartImportActionPerformed

    /**
     * Action event for starting the textmining
     *
     * @param evt The action event
     */
private void jButtonStartTextMiningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartTextMiningActionPerformed
    System.setProperty("javax.net.ssl.keyStore", "cacerts.jks"); //og//
    System.setProperty("javax.net.ssl.keyStorePassword", "apollo"); //og//
    System.setProperty("javax.net.ssl.trustStore", "cacerts.jks"); //og//
    System.setProperty("javax.net.ssl.trustStorePassword", "apollo"); //og//
    System.setProperty("javax.net.debug", "ssl"); //og//
    Thread t = new Thread() {

        public void run() {
            TextMining miner = new TextMining(text_mining_options_);
            miner.start();
        }
    };
    jTextAreaLog.append("\n\rstarting text mining ...");
    t.start();
    jTextAreaLog.append(" " + String.valueOf(t.getId()));
    jTextAreaLog.append(" " + t.getState().toString());
    while (t.isAlive()) {
    }
    jTextAreaLog.append("\n\r  >>>  Text Mining done.  <<<  ");
    jButtonStartTextMining.setEnabled(true);
    jButtonStartExport.setEnabled(true);
    jButtonStartRuleMarker.setEnabled(true);

}//GEN-LAST:event_jButtonStartTextMiningActionPerformed

    /**
     * Action event for the starting of the options
     *
     * @param evt The action event
     */
private void jButtonEditTextMiningOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditTextMiningOptionsActionPerformed
    EditTextMiningOptions edit_text_mining_options = new EditTextMiningOptions(text_mining_options_, this);
    edit_text_mining_options.setVisible(true);
    setActive(false);
}//GEN-LAST:event_jButtonEditTextMiningOptionsActionPerformed

    /**
     * Action event to start the export
     *
     * @param evt The action event
     */
private void jButtonStartExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartExportActionPerformed
    System.setProperty("javax.net.ssl.keyStore", "cacerts.jks"); //og//
    System.setProperty("javax.net.ssl.keyStorePassword", "apollo"); //og//
    System.setProperty("javax.net.ssl.trustStore", "cacerts.jks"); //og//
    System.setProperty("javax.net.ssl.trustStorePassword", "apollo"); //og//
    System.setProperty("javax.net.debug", "ssl"); //og//
    Thread t = new Thread() {

        public void run() {
            ExportIBMT export = new ExportIBMT(export_folder_);
            export.run();
        }
    };
    jTextAreaLog.append("\n\rstarting export ...");
    t.start();
    jTextAreaLog.append(" " + String.valueOf(t.getId()));
    jTextAreaLog.append(" " + t.getState().toString());
    while (t.isAlive()) {
    }
    jTextAreaLog.append("\n\r  >>>  Export done.  <<<  ");
    jButtonStartExport.setEnabled(true);
}//GEN-LAST:event_jButtonStartExportActionPerformed

    /**
     * Action event for the export
     *
     * @param evt The action event
     */
private void jButtonSelectExportMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonSelectExportMouseClicked
    JFileChooser fj = new JFileChooser(".");
    fj.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    int returnval = fj.showOpenDialog(this);

    if (returnval == JFileChooser.APPROVE_OPTION) {
        export_folder_ = fj.getSelectedFile().getAbsolutePath();
        export_folder_ = export_folder_.replace("\\", "\\\\");
        jTextFieldExportFolder.setText(fj.getSelectedFile().getAbsolutePath());
    }
}//GEN-LAST:event_jButtonSelectExportMouseClicked

    /**
     * Action event to start the rule marker
     * @param evt The action event
     */
private void jButtonStartRuleMarkerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartRuleMarkerActionPerformed
    System.setProperty("javax.net.ssl.keyStore", "cacerts.jks"); //og//
    System.setProperty("javax.net.ssl.keyStorePassword", "apollo"); //og//
    System.setProperty("javax.net.ssl.trustStore", "cacerts.jks"); //og//
    System.setProperty("javax.net.ssl.trustStorePassword", "apollo"); //og//
    System.setProperty("javax.net.debug", "ssl"); //og//
    Thread t = new Thread() {

        public void run() {
            SAAT.evaldisplay.gui.MainWindow rule_marker = new SAAT.evaldisplay.gui.MainWindow();
            rule_marker.setVisible(true);
        }
    };
    jTextAreaLog.append("\n\rstarting RuleMarker...");
    t.start();
    jTextAreaLog.append("\n\r" + String.valueOf(t.getId()));
    jTextAreaLog.append("\n\r" + t.getState().toString());
    while (t.isAlive()) {
    }
    jTextAreaLog.append("\n\rstarting RuleMarker...done");
}//GEN-LAST:event_jButtonStartRuleMarkerActionPerformed

    /**
     * Set for the text mining options
     *
     * @param text_mining_options The options
     */
    public void setTextMiningOptions(String[] text_mining_options) {
        text_mining_options_ = text_mining_options;
    }

    /**
     * Set active the window
     *
     * @param enable set the window event
     */
    public void setActive(boolean enable) {
        setEnabled(enable);
        setFocusable(enable);
    }
    
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton jButtonEditTextMiningOptions;
  private javax.swing.JButton jButtonSelectExport;
  private javax.swing.JButton jButtonSelectXMLFile;
  private javax.swing.JButton jButtonStartExport;
  private javax.swing.JButton jButtonStartImport;
  private javax.swing.JButton jButtonStartRuleMarker;
  private javax.swing.JButton jButtonStartTextCleanup;
  private javax.swing.JButton jButtonStartTextMining;
  private javax.swing.JCheckBox jCheckBox1;
  private javax.swing.JCheckBox jCheckBox2;
  private javax.swing.JCheckBox jCheckBox3;
  private javax.swing.JCheckBox jCheckBox4;
  private javax.swing.JCheckBox jCheckBox5;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JLabel jLabel6;
  private javax.swing.JLabel jLabel7;
  private javax.swing.JLabel jLabel8;
  private javax.swing.JMenu jMenu3;
  private javax.swing.JMenu jMenu4;
  private javax.swing.JMenuBar jMenuBar2;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JTextArea jTextAreaLog;
  private javax.swing.JTextField jTextFieldExportFolder;
  private javax.swing.JTextField jTextFieldFileName;
  // End of variables declaration//GEN-END:variables
}
