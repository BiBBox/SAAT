/***********************************************
 * MainWindow.java
 ***********************************************
 *
 ***********************************************
 * VERSION 1
 *
 * Medical University Graz
 * Institut of Pathology
 * Group of Univ.Prof. Dr.med.univ. Kurt Zatloukal
 * kurt.zatloukal(at)medunigraz.at
 * http://forschung.medunigraz.at/fodok/suchen.person_uebersicht?sprache_in=en&menue_id_in=101&id_in=90075196
 *
 ***********************************************
 * VERSION 2
 * http://sourceforge.net/projects/saat/
 *
 * Medical University Graz
 * Institut of Pathology
 * Group of Univ.Prof. Dr.med.univ. Kurt Zatloukal
 * kurt.zatloukal(at)medunigraz.at
 * http://forschung.medunigraz.at/fodok/suchen.person_uebersicht?sprache_in=en&menue_id_in=101&id_in=90075196
 *
 * Fraunhofer-Gesellschaft
 * Fraunhofer Institute for Biomedical Engineering
 * Central Research Infrastructure for molecular Pathology
 * Dr. Christina Schrï¿½der
 * Christina.Schroeder(at)ibmt.fraunhofer.de
 * http://www.crip.fraunhofer.de/en/about/staff?noCache=776:1304399536
 ***********************************************
 * DESCRIPTION
 *
 * The main window for the EvalStringParser
 ***********************************************
 */
package SAAT.evaldisplay.gui;

import java.awt.Color;
import java.util.ArrayList;
import javax.swing.JTree;
import javax.swing.text.BadLocationException;
import javax.swing.text.MutableAttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import javax.swing.tree.TreePath;
import SAAT.evaldisplay.EvalStringNode;
import SAAT.evaldisplay.EvalStringParser;
import SAAT.textmining.DiseaseEntry;
import SAAT.textmining.TextMining;
import SAAT.textmining.icd.PriorityCodeTuple;

/**
 * The main window for the EvalStringParser
 * 
 * @author  Reihs Robert
 * @author  Sauer Stefan
 * @version 2.0
 * @since   since_version_2_date
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Variable decleration
     */
    EvalStringParser parser_;
    ArrayList<Color> colors_;
    TextMining miner_;
    TreeViewRenderer trenderer_;
    DiseaseEntry de_;
    String diseaseText_;

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        parser_ = new EvalStringParser();
        makeColorArray();

        miner_ = new TextMining(new String[]{"-ICD"});
        initComponents();

        trenderer_ = new TreeViewRenderer();
        trenderer_.setColors(colors_);
        jTree1.setModel(parser_);
        jTree1.setCellRenderer(trenderer_);

        jTextDiseaseID2_.setText("1");
    }

    /**
     * Color the text of the txt in the text area
     *
     * @param wordnumber The number of the word
     * @param c The color
     */
    private void colorText(int wordnumber, Color c) {
        int[] wb = de_.getWordBoundarysWithWordIndex(wordnumber);

        if (wb == null) {
            return;
        }

        MutableAttributeSet keyWord = new SimpleAttributeSet();
        StyleConstants.setForeground(keyWord, c);
        StyleConstants.setItalic(keyWord, true);
        StyleConstants.setBold(keyWord, true);


        StyledDocument doc = jTextPane_.getStyledDocument();
        try {
            String text = doc.getText(wb[0], wb[1] - wb[0]);
            doc.remove(wb[0], wb[1] - wb[0]);
            doc.insertString(wb[0], text, keyWord);

        } catch (BadLocationException ex) {
            ex.printStackTrace();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jTextFieldDictionaryID_ = new javax.swing.JTextField();
        jButtonExpandDictionaryID_ = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane_ = new javax.swing.JTextPane();
        jButtonParse_ = new javax.swing.JButton();
        jTextDiseaseID2_ = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setMinimumSize(new java.awt.Dimension(100, 3));

        jTree1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTree1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTree1);

        jTextFieldDictionaryID_.setText("1745");
        jTextFieldDictionaryID_.setEnabled(false);

        jButtonExpandDictionaryID_.setLabel("expand");
        jButtonExpandDictionaryID_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExpandDictionaryID_ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .add(jTextFieldDictionaryID_, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButtonExpandDictionaryID_))
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButtonExpandDictionaryID_)
                    .add(jTextFieldDictionaryID_, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );

        jSplitPane1.setLeftComponent(jPanel2);

        jScrollPane2.setViewportView(jTextPane_);

        jButtonParse_.setText("parse");
        jButtonParse_.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonParse_MouseClicked(evt);
            }
        });

        jTextDiseaseID2_.setText("307841");
        jTextDiseaseID2_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextDiseaseID2_ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(293, Short.MAX_VALUE)
                .add(jTextDiseaseID2_, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 105, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButtonParse_))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButtonParse_)
                    .add(jTextDiseaseID2_, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(jPanel1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 669, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * The mouse event for the id
     *
     * @param evt The Action Event
     */
  private void jTextDiseaseID2_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextDiseaseID2_ActionPerformed
      jButtonParse_MouseClicked(null);
  }//GEN-LAST:event_jTextDiseaseID2_ActionPerformed

  /**
   * Expand all dictionary ids
   *
   * @param evt The Action Event
   */
  private void jButtonExpandDictionaryID_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExpandDictionaryID_ActionPerformed
      expandAll(jTree1, true, 0);
  }//GEN-LAST:event_jButtonExpandDictionaryID_ActionPerformed

  /**
   * Start the parsing
   *
   * @param evt  The Action Event
   */
  private void jButtonParse_MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonParse_MouseClicked
      jTextFieldDictionaryID_.setText("working");
      String did = jTextDiseaseID2_.getText();
      try {
          int disease_id = Integer.parseInt(did);

          miner_.start(disease_id);

          EvalStringNode node = miner_.getEvalStringNode();
          parser_.parse(node);

          PriorityCodeTuple tuple = miner_.getLastPriorityCodeTuple();
          parser_.setPriorityCodeTuple(tuple);

          de_ = miner_.getLastDiseaseEntry();

          jTextPane_.setText(de_.textCleaned.replace("@", " "));

          jTree1.updateUI();
      } catch (NumberFormatException ex) {
          jTextFieldDictionaryID_.setText("error");
      }
      jTextFieldDictionaryID_.setText("done");
  }//GEN-LAST:event_jButtonParse_MouseClicked

    /**
     * Expand all nodes in the tree
     *
     * @param tree A Tree
     * @param expand If expande or not
     * @param dictionary_id The dictionary id
     */
    private void expandAll(JTree tree, boolean expand, int dictionary_id) {
        EvalStringNode root = (EvalStringNode) tree.getModel().getRoot();
        expandAll(tree, new TreePath(root), expand, dictionary_id);
    }

    /**
     * Expand all nodes in the tree recursive
     *
     * @param tree A Tree
     * @param parent The parent element
     * @param expand If expande or not
     * @param dictionary_id The dictionary id
     */
    private void expandAll(JTree tree, TreePath parent, boolean expand, int dictionary_id) {
        EvalStringNode node = (EvalStringNode) parent.getLastPathComponent();

        if (node.getChildCount() > 0) {
            for (EvalStringNode n : node.children()) {
                TreePath path = parent.pathByAddingChild(n);
                expandAll(tree, path, expand, dictionary_id);
            }
        }
        if (expand) {
            EvalStringNode esn = (EvalStringNode) parent.getLastPathComponent();
            if (esn.getDictionaryID() == dictionary_id) {
                tree.expandPath(parent);
            }

            if (dictionary_id == 0) {
                tree.expandPath(parent);
            }

        } else {
            tree.collapsePath(parent);
        }
    }

    /**
     * The mouse event for the tree
     *
     * @param evt The Action Event
     */
  private void jTree1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTree1MouseClicked

      TreePath tp = jTree1.getSelectionPath();

      if (tp == null) {
          return;
      }

      if (de_ == null) {
          return;
      }
      jTextPane_.setText(de_.textCleaned.replace("@", " "));

      Object[] esno = tp.getPath();

      if (colors_.size() < esno.length - 1) {
          jTextPane_.setText("too less colors defined!");
          return;
      }
      MutableAttributeSet keyWord = new SimpleAttributeSet();
      StyleConstants.setForeground(keyWord, Color.BLACK);
      StyleConstants.setItalic(keyWord, false);
      StyleConstants.setBold(keyWord, false);

      StyledDocument doc = jTextPane_.getStyledDocument();
      try {
          String text = doc.getText(0, doc.getLength());
          doc.remove(0, doc.getLength());
          doc.insertString(0, text, keyWord);

      } catch (BadLocationException ex) {
          ex.printStackTrace();
      }
      for (int i = 1; i < esno.length; ++i) {
          EvalStringNode esn = (EvalStringNode) esno[i];

          if (esn.getSynonym().contains("--")) {
              continue;
          }

          int wi = esn.getWordIndex();

          colorText(wi, colors_.get(i));
      }
  }//GEN-LAST:event_jTree1MouseClicked

    
    /**
     * Generate the color array
     */
    private void makeColorArray() {
        colors_ = new ArrayList<Color>();
        colors_.add(Color.BLACK); // This Color will never be seen (rootNode)
        colors_.add(Color.RED);
        colors_.add(Color.BLUE);
        colors_.add(Color.GREEN);
        colors_.add(Color.PINK);
        colors_.add(Color.ORANGE);
        colors_.add(Color.MAGENTA);

        colors_.add(Color.CYAN);
        colors_.add(Color.DARK_GRAY);
        colors_.add(Color.LIGHT_GRAY);
        colors_.add(Color.YELLOW);

        colors_.add(Color.RED);
        colors_.add(Color.BLUE);
        colors_.add(Color.GREEN);
        colors_.add(Color.PINK);
        colors_.add(Color.ORANGE);
        colors_.add(Color.MAGENTA);

        colors_.add(Color.CYAN);
        colors_.add(Color.DARK_GRAY);
        colors_.add(Color.LIGHT_GRAY);
        colors_.add(Color.YELLOW);

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonExpandDictionaryID_;
    private javax.swing.JButton jButtonParse_;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextField jTextDiseaseID2_;
    private javax.swing.JTextField jTextFieldDictionaryID_;
    private javax.swing.JTextPane jTextPane_;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
}
